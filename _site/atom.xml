<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Tyler Abbot</title>
  <generator uri="https://github.com/jekyll/jekyll">Jekyll v2.4.0</generator>
    <icon>/apple-touch-icon-precomposed.png</icon>
  <subtitle>My personal website</subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="/" rel="alternate" type="text/html"/>
  <updated>2015-04-26T20:55:49+02:00</updated>
  <id>/</id>
  <author>
    <name></name>
    <uri>/</uri>
    
  </author>

  
  <entry>
    <title>03 - GitHub</title>
    <link href="/programming/github/"/>
    <updated>2015-04-26T18:31:06+02:00</updated>
    <id>/programming/github</id>
    <author>
      <name></name>
      <uri>/</uri>
      
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction-to-github&quot;&gt;Introduction to GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#signing-up-for-github&quot;&gt;Signing Up for GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-a-repository&quot;&gt;Creating a Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-files-to-a-repository&quot;&gt;Adding Files to a Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#further-reading&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;p&gt;I signed up for GitHub to create this website and the whole process seemed incredibly difficult and vague.  In this post I’m going to introduce GitHub and really quickly describe signing up, creating a repository, and editing that repository.  If you want a more hands on and thorough lesson, you should head over to Code School for their &lt;a href=&quot;https://www.codeschool.com/courses/try-git&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Try Git&lt;/strong&gt;&lt;/a&gt; course.&lt;/p&gt;

&lt;h2 id=&quot;introduction-to-github&quot;&gt;Introduction to GitHub&lt;/h2&gt;
&lt;p&gt;Git is a file sharing website.  That’s it.  But the real power in Git comes from the ability to download, update, and share code easily.  Essentially, if there is an open source project that you would like to contribute to, you can “fork” that repository.  Then, if you would like to share your changes, you simply submit a “pull request” to the repository’s author.  They can see by your profile what you have done and how trustworthy you are.&lt;/p&gt;

&lt;p&gt;Also, one bonus of git is their free website hosting (which is where this website is) through GitHub Pages.  If you would like to set up a GitHub website, check out this &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;page&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;signing-up-for-github&quot;&gt;Signing Up for GitHub&lt;/h2&gt;
&lt;p&gt;Creating a GitHub account is really easy.  Just go to &lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;https://github.com/&lt;/strong&gt;&lt;/a&gt; and follow the steps.  You’ll also need to &lt;a href=&quot;http://git-scm.com/downloads&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;download and install&lt;/strong&gt;&lt;/a&gt; git.  You might want to use a GUI client, but it is up to you how you want to work with Git.  This tutorial will use the command line.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-repository&quot;&gt;Creating a Repository&lt;/h2&gt;
&lt;p&gt;The first thing you need to do is to create a repository on your GitHub page by clicking on the little ‘+’ sign in the upper right hand corner.  This will take you to a page that will give you options for creating repositories from the command line in the future.  You’ll also be given a URL for your repository, which you should copy to the clipboard.  Click on the README link to create a readme file in your repository and add some blablabla, then save the changes.&lt;/p&gt;

&lt;p&gt;Next, you need to create a local repository.  In the terminal, &lt;code&gt;cd&lt;/code&gt; into whatever directory you want to be the parent directory of your local git repository.  Once there, type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/blablabla&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;… obviously replacing the url by the one you just copied.  This will copy all of the files from your repository on GitHub and intitialize your local repository.  &lt;/p&gt;

&lt;h2 id=&quot;adding-files-to-a-repository&quot;&gt;Adding Files to a Repository&lt;/h2&gt;

&lt;p&gt;Now that you have a repository, let’s learn to make some changes.  First, create any kind of file in the local repository you want.  Seriously, just save a .txt haiku about your cat, it doesn’t really matter.  Now that it is done, type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git status&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see a red &lt;code&gt;cat_haiku.txt&lt;/code&gt;.  This means there is a new file in your local repository that has not yet been staged.  What you need to do is add your new file to the staging area.  There are several ways to do this, by name, by file type, etc., but one nice one is to just add ALL of the new files:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add --all&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now if you run &lt;code&gt;git status&lt;/code&gt; again, you’ll see that &lt;code&gt;cat_haiku.txt&lt;/code&gt; is ready to commit.  Finally, to commit the changes to the repository, type the following&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;A message&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;-m &quot;A message&quot;&lt;/code&gt; allows you to include the commit message directly in the command line (try doing this command without it, it is really not fun).&lt;/p&gt;

&lt;p&gt;Now, your updated project is saved in the GitHub repository, but it is not yet shared.  In fact, the new haiku won’t even show up on your personal page.  How will anyone read it!?  The last thing you need to do is to push the repository.  Type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You’ll be prompted for your username and password.  Once that’s done you can celebrate!&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;Git is a really powerful tool, but I guess the assumption is that you are a computer programmer who knows all about this stuff, because the how-to guides are pretty difficult to find/hard to understand.  However, I stumbled across &lt;a href=&quot;https://sethrobertson.github.io/GitBestPractices/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; great page that gathers a bunch of useful links into one place.  I highly recommend you take a few hours to read and learn about everything Git can do and how to use it.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>01 - Why Python? I Already Know R!</title>
    <link href="/programming/why-python-i-already-know-r/"/>
    <updated>2015-04-16T18:13:19+02:00</updated>
    <id>/programming/why-python-i-already-know-r</id>
    <author>
      <name></name>
      <uri>/</uri>
      
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-are-the-differences-between-r-and-python&quot;&gt;What are the differences between R and Python?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#which-should-i-choose&quot;&gt;Which should I choose?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#where-are-things-heading&quot;&gt;Where are things heading?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Python and R are both widely used in the sciences and social sciences, but the two tend to be used by different user groups.&lt;/p&gt;

&lt;p&gt;R was developed by statisticians for statisticians.  Originally developed by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, in 1993, the language has taken the statistical field by storm.  Actually, you can’t quite call R a language… unlike Python, R is a software environment geared specifically towards statistics.  That means that R is similar to Matlab or Stata, but OpenSource.  It’s not clear from the 20 minutes I spent trying to figure out how R works exactly what the program does, but as far as I can tell R is a highlevel language interpreter similar to Python, except without some of the liberties.&lt;/p&gt;

&lt;p&gt;Python was developed by computer programmers for everyone.  In the late 1980’s, Guido van Rossum developed an interpreter and language as a hobby (!) and since then the “core philosophy” of python has become the “zen of Python” (just open up ipython and type &lt;code&gt;import this&lt;/code&gt;).  The overall thrust is to make the programming experience as easy as possible.  Essentially, when you execute Python code, the program is parsed, compiled, and interpreted.  Compared to a language like C++, the process is similar, but you don’t actually have to carry out the steps yourself in Python!  However, if you are new to Python, the whole experience can often seem like trying to kill a fly with a cannonball.  With a bit of practice, though, you can find a workflow that works well for you.&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-differences-between-r-and-python&quot;&gt;What are the differences between R and Python?&lt;/h2&gt;
&lt;p&gt;There are several key differences between R and Python, including versatility, available packages, and usability.&lt;/p&gt;

&lt;p&gt;One of the biggest benefits and downfalls for R is its precise focus on statistics.  If there is a cutting edge statistical method, from econometrics to biometrics, it is surely available as an R package.  However, the development of the project let fall some of the freedom one needs to deal with big-data.  As is described in &lt;a href=&quot;https://blogs.oracle.com/R/entry/what_is_r&quot;&gt;this&lt;/a&gt; article, R is only single thread and can create duplicate data objects that quickly overload the onboard memory.  Because of this, R becomes unsuitable for big-data applications or massive computation.  This is where Python really shines, through packages like &lt;a href=&quot;http://documen.tician.de/pycuda/&quot; target=&quot;_blank&quot;&gt;PyCuda&lt;/a&gt;, &lt;a href=&quot;http://pypy.org/&quot; target=&quot;_blank&quot;&gt;PyPy&lt;/a&gt;, and &lt;a href=&quot;http://star.mit.edu/cluster/&quot; target=&quot;_blank&quot;&gt;StarCluster&lt;/a&gt;, that allow you to create massively parallel programs and/or run them easily on cloud computing services.&lt;/p&gt;

&lt;p&gt;Python truly falls short in terms of statistical analysis packages, but this seems to be changing.  R benefits from its specialty purpose, in that EVERY SINGLE PACKAGE created for R is used for statistics.  On the other hand, the number of contributors to Python is far greater than that for R, but the number of statisticians is much smaller.  However, that number is beginning to reach a critical mass such that statistical modules in Python must compete and are becoming better.  Alongside the traditional &lt;a href=&quot;http://pandas.pydata.org/&quot; target=&quot;_blank&quot;&gt;Pandas&lt;/a&gt; package, you now have new things like &lt;a href=&quot;http://statsmodels.sourceforge.net/stable/&quot; target=&quot;_blank&quot;&gt;StatsModels&lt;/a&gt; that have many of the tools you might be looking for.&lt;/p&gt;

&lt;p&gt;Finally, if you are just starting out with programming, Python may seem too daunting.  It is true that with tools like &lt;a href=&quot;http://www.rstudio.com/&quot; target=&quot;_blank&quot;&gt;RStudio&lt;/a&gt; you can work with R in a MatLab like graphical user interface that is easy and intuitive.  On the flipside, installing and learning to leverage Python involves downloading and installing text editors and setting path variables, etc. that may seem daunting to a newbie.  However, new tools like &lt;a href=&quot;http://lighttable.com/&quot; target=&quot;_blank&quot;&gt;LightTable&lt;/a&gt; are making the whole process more palatable.&lt;/p&gt;

&lt;h2 id=&quot;which-should-i-choose&quot;&gt;Which should I choose?&lt;/h2&gt;

&lt;p&gt;You’re not going to like this… but you should learn BOTH!  If you don’t already know a program like R or Python, then that means you are either a student or someone changing careers.  You are not mired in the tradition of R or too much of a programming wunderkind to shy-away from the one trick pony of R.  That being said, everyone you work with will know one or the other and if you want to be able to move from project to project with ease you need to know both.&lt;/p&gt;

&lt;p&gt;Personally, I am only familiar with academia.  Every professor will only know Matlab and (maybe) R, so in order to work with them it is necessary to be familiar.  But, the most cutting edge tools are in Python and large scale computation is heavy and slow in R, so in order to be able to compete in the future I see Python (or C++) as a necessity.&lt;/p&gt;

&lt;h2 id=&quot;where-are-things-heading&quot;&gt;Where are things heading?&lt;/h2&gt;

&lt;p&gt;Neither one of these languages is going anywhere soon.  That being said, I think that the number of passionate programmers and statisticians working on Python is growing in comparison to R and that in the future we’ll need more versatile tools.  I have spent so much time now in Python, that I don’t even consider opening up R, even for statistics, unless I need to work with someone else who doesn’t know Python.  That being said, I’ll soon be doing som complicated econometrics, so maybe I’ll dust off my R books and get back on the wagon.&lt;/p&gt;


    </content>
  </entry>
  
  <entry>
    <title>02 - How to Make Posts in Jekyll.</title>
    <link href="/programming/how-to-make-posts/"/>
    <updated>2015-04-12T14:55:42+02:00</updated>
    <id>/programming/how-to-make-posts</id>
    <author>
      <name></name>
      <uri>/</uri>
      
    </author>
    <content type="html">
      
      &lt;p&gt;Ok, so this is a selfish post, but I have been struggling to get these posts looking good, so I’m leaving this here for later reference.  This post is just for me to learn a bit about octopress and some formatting stuff so if you’re an outsider, sorry for the clutter!  This probably won’t be very interesting.&lt;/p&gt;

&lt;p&gt;To spin up a local server navigate to the local repository folder and type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve --watch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To generate a post under some heading, open a terminal and navigate to the site folder.  Then, run the following code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundle exec octopress new post &quot;NAME_OF_POST&quot; --dir path/to/post &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will generate a markdown file at the appropriate point in the file tree.  Jekyll should automatically update the parent page to add a link to the post.&lt;/p&gt;

&lt;p&gt;If you would like to create a new page, the syntax is similar:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundle exec octopress new page path/to/page&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, jekyll will not automatically create the required links, so you’ll have to do this yourself.&lt;/p&gt;

&lt;h2 id=&quot;formatting-junk&quot;&gt;Formatting Junk&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Type&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;some code&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;HUZZZAAHHHH! The above code took a long time to find, so here’s how it goes in markdown:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;highlight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;python&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;linenos&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; import numpy
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; print(&amp;quot;foobar&amp;quot;)
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endhighlight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To add headlines, type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; HEADLINE
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; --------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can add hash tags to the front to change the size of the header.&lt;/p&gt;

&lt;p&gt;If you want a link that opens in a new tab use&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www.website.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Link Text&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    </content>
  </entry>
  
  <entry>
    <title>01 - Packages.</title>
    <link href="/programming/packages/"/>
    <updated>2015-04-12T14:52:06+02:00</updated>
    <id>/programming/packages</id>
    <author>
      <name></name>
      <uri>/</uri>
      
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#package-management&quot;&gt;Package Management&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bibliography-management&quot;&gt;Bibliography Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;p&gt;Using LaTeX is mandatory for anyone who needs to type math, but getting the whole thing set-up can be a gigantic pain.  The key to a good install is to get TeX live installed right so that you have a good package manager, then to properly place your packages in the file tree so TexLive can find them.  If you are running Ubuntu or Debian, I suggest following &lt;a href=&quot;http://tex.stackexchange.com/questions/1092/how-to-install-vanilla-texlive-on-debian-or-ubuntu/95373#95373&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;these&lt;/strong&gt;&lt;/a&gt; super thorough instructions on how to install Tex Live.&lt;/p&gt;

&lt;h2 id=&quot;package-management&quot;&gt;Package Management&lt;/h2&gt;

&lt;p&gt;If you are writing finance papers (or any other economics papers, for that matter) you’ll eventually have to put them in a format to match a journal, or you’ll just want a nicer format than a standard LaTeX article.  In order to do this, you’ll probably need to download some special packages.  When you want to add these custom packages, you should store them in a folder under &lt;code&gt;texmf&lt;/code&gt;, in particular I use&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/usr/local/texlive/texmf-local/tex/latex/tmabbot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should store any .sty, .bst, or .cls files you download here for easy reference.  One key thing to remember is to run &lt;code&gt;texhash&lt;/code&gt; whenever you are done.  Since I followed the directions in the link in the first paragraph, I have a symbolic link.  Thus I have to type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo /opt/texbin/texhash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;into a terminal.  This will update the packages available in Tex and you should be able to compile your papers.&lt;/p&gt;

&lt;p&gt;A great resource for finance paper formatting and a much more thorough introduction to LaTex can be found on Richard Stanton’s &lt;a href=&quot;http://faculty.haas.berkeley.edu/stanton/texintro/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;website&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2 id=&quot;bibliography-management&quot;&gt;Bibliography Management&lt;/h2&gt;

&lt;p&gt;If you tend to use the same references often, you can create one large bibliography file and store it in the file tree so that you don’t have to move it from place to place.  I have had a lot of trouble getting my bibliography well placed, so I’ve come up with a bit of a workaround.  I place my .bib file in any some directory (for me it is called “Writing”) and then reference this file in my latex documents using the bibliography command. You simply use &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\bibliography&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;/path/to/bibliography&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;instead of just&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\bibliography&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    </content>
  </entry>
  
  <entry>
    <title>01 - How to Setup Ipython.</title>
    <link href="/programming/how-to-setup-ipython/"/>
    <updated>2015-04-12T11:56:17+02:00</updated>
    <id>/programming/how-to-setup-ipython</id>
    <author>
      <name></name>
      <uri>/</uri>
      
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#python-ing&quot;&gt;Python-ing!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;p&gt;If you are hoping to get into Python and need help getting set-up, this post is for you.  My preference for installing Python is Continuum Analytics’ Anaconda bundle.  It comes with all the packages you need to get started and is quick and easy to install.  I’ll go through the steps for getting up and running quickly in Ubuntu Linux, as well as covering some of the most useful basic features of Ipython.  If you are using OS or Windows the steps are a little different and you can find a guide &lt;a href=&quot;https://store.continuum.io/static/img/Anaconda-Quickstart.pdf&quot; target=&quot;_blank&quot;&gt;HERE.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;First, you’ll need to download Anaconda &lt;a href=&quot;https://store.continuum.io/cshop/anaconda/&quot; target=&quot;_blank&quot;&gt;HERE.&lt;/a&gt;  The site will detect your system and suggest the proper insall.  NOTE: If you are running a 32-bit operating system, you will have problems in the future if you want to install more advanced tools like PyCuda (I had to reinstall my entire operating system).  Also, I suggest you go with a Python 2.X version.  Although Python 3.X is available, some packages do not have good backwards compatibility.&lt;/p&gt;

&lt;p&gt;Second, open up a terminal and navigate to your Dowloads folder by typing&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Downloads/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once there, execute the installer by typing in the terminal&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bash NAME_OF_FILE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where you replace NAME_OF_FILE with the name of your download, which changes with version.  You’ll be prompted to specify an install location.  Use the default so that you can easily find what you are looking for later.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Next, you need to add the anaconda file to your path variable, so that terminal can find it.  As a side note, you can learn more about what PATH is and why it always seems to be a problem &lt;a href=&quot;http://www.linfo.org/path_env_var.html&quot; target=&quot;_blank&quot;&gt;HERE.&lt;/a&gt;  To see what the path variable is type the following in the terminal&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you do not see a folder containing the word “anaconda”, you need to update the PATH.  Type the following into the terminal&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/anaconda:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which will append the directory to your path.  My anaconda directory is under &lt;code&gt;/home/user_name/anaconda/bin&lt;/code&gt;, but yours might be slightly different.&lt;/p&gt;

&lt;p&gt;Now open a new terminal window and type &lt;code&gt;ipython&lt;/code&gt;.  That’s it!  You’re now using Python!&lt;/p&gt;

&lt;h2 id=&quot;python-ing&quot;&gt;Python-ing!&lt;/h2&gt;
&lt;p&gt;Now that you have your sweet Ipython set-up, what can it do?!  There are several ways to work with Ipython.  First, you can work directly at the command line.  By typing &lt;code&gt;ipython&lt;/code&gt; at the terminal you open an “Ipython shell”, where whatever you type will run in Python.  Another way to work on more complex projects is to write Python programs in a text-editor, such as Vim or Lightbox (post to come), and then to run these programs in your Ipython shell.  Finally, one of the coolest things you can do is to use the Ipython Notebook.  Open up a terminal and type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;ipython&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notebook&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will open up an Ipython Notebook session in your default browser.  Then you can create a new ipython notebook, like &lt;a href=&quot;http://nbviewer.ipython.org/github/tyler-abbot/tyler-abbot.github.io/tree/master/misc/test.ipynb&quot; target=&quot;_blank&quot;&gt;this one&lt;/a&gt;.  Ipython notebooks are great teaching tools, so I’ll be using them often on this site to describe lots of things.&lt;/p&gt;

&lt;p&gt;That’s it!  You are now ready to learn to program in Python.  For more on different packages, best-practices (as far as an economist knows best practices), and lots of other stuff about Python, head &lt;a href=&quot;/programming/python.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For some outside sources so you can hit the ground running, check out these great resources:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://wakari.io&quot; class=&quot;btn-inverse&quot;&gt;&lt;strong&gt;Wakari&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;
This website allows you to use a remote Python environment over the internet.  That way, you can use Python from any terminal.  Be warned: if you are in a large institution, they may have a firewall that blocks the necessary ports!  You’ll just have to try it out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://quant-econ.net&quot; class=&quot;btn-inverse&quot;&gt;&lt;strong&gt;Quant-Econ&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;
This is a great resource for learning Python and Julia for economics.  The site is run by Thomas J. Sargent and John Stachursky.  The course proceeds through numerical examples and practical exercises.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.kevinsheppard.com/Python_for_Econometrics&quot; class=&quot;btn-inverse&quot;&gt;&lt;strong&gt;Python for Econometrics&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;
This is a site that I’ve been meaning to check out.  One of the biggest complaints by economists is the lack of econometric tools in Python.  However, things are beginning to develop as more economists transition over.&lt;/p&gt;
&lt;/blockquote&gt;

    </content>
  </entry>
  
  
</feed>