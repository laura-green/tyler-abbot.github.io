<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  

  <title>Tyler Abbot</title>
  <generator uri="https://github.com/jekyll/jekyll">Jekyll v2.4.0</generator>
    <icon>https://tyler-abbot.github.io/apple-touch-icon-precomposed.png</icon>
  <subtitle>My personal website</subtitle>
  <link href="https://tyler-abbot.github.io/atom.xml" rel="self"/>
  <link href="https://tyler-abbot.github.io/" rel="alternate" type="text/html"/>
  <updated>2016-02-16T13:06:00+01:00</updated>
  <id>https://tyler-abbot.github.io/</id>
  <author>
    <name>Tyler Abbot</name>
    <uri>https://tyler-abbot.github.io/</uri>
    <email>tyler.abbot@sciencespo.fr</email>
  </author>

  
  <entry>
    <title>04 - Manipulating the File Tree</title>
    <link href="https://tyler-abbot.github.io/programming/sys/"/>
    <updated>2015-09-20T14:09:19+02:00</updated>
    <id>https://tyler-abbot.github.io/programming/sys</id>
    <author>
      <name>Tyler Abbot</name>
      <uri>https://tyler-abbot.github.io/</uri>
      <email>tyler.abbot@sciencespo.fr</email>
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shutil-functions&quot;&gt;Shutil Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#os-functions&quot;&gt;OS Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#glob-functions&quot;&gt;Glob Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;p&gt;I’ve recently been working on building a dataset from the Consumer Expenditure Survey and was so frustrated by the number of files to download that I decided to automate the process.  In doing so, I had to use several packages to identify files, create directories, and remove unnecessary junk.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;shutil&lt;/code&gt; module, standing for ‘shell utility’, is part of the standard library.  It is a module containing many of the high level file operations that you would use from the standard Unix or Linux command line.  In particular, &lt;code&gt;shutil&lt;/code&gt; is useful for generating directories, copying and moving files, and changing file names.  If you are hoping to automate any data gathering work, this will be super useful.&lt;/p&gt;

&lt;p&gt;Along with &lt;code&gt;shutil&lt;/code&gt;, you will probably also want the &lt;code&gt;os&lt;/code&gt; module, which will allow you to dynamically define the file path seperator so your program works on any operating system, to create directories, and to rename files.  &lt;code&gt;os&lt;/code&gt; allows you to interact directly with the operating system, so if you want to write truly modular code that deals with the file tree, you will need ot use it.&lt;/p&gt;

&lt;p&gt;Finally, I used &lt;code&gt;glob&lt;/code&gt; to parse file names and identify the ones I wanted to keep and the ones I wanted to replace.&lt;/p&gt;

&lt;h2 id=&quot;shutil-functions&quot;&gt;Shutil Functions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code&gt;shutil.copy(src, dst)&lt;/code&gt;&lt;/strong&gt; - Copy the contents of file &lt;code&gt;src&lt;/code&gt; to a new file at &lt;code&gt;dst&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code&gt;shutil.copytree(src, dst)&lt;/code&gt;&lt;/strong&gt; - Copy an entire directory tree “rooted” at source.  So this copies all the files and folders in &lt;code&gt;src&lt;/code&gt; to a new folder at &lt;code&gt;dst&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code&gt;shutil.rmtree(path)&lt;/code&gt;&lt;/strong&gt; - Remove an entire directory rooted at &lt;code&gt;path&lt;/code&gt;.  This is nice if you would like to combine files and clean up after yourself.  For instance, if you download 100 zip files in different folders and need one file from within them, you can gather, copy or move it, and delete the zip.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code&gt;shutil.move(src, dst)&lt;/code&gt;&lt;/strong&gt; - Move a folder from &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dist&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;os-functions&quot;&gt;OS Functions&lt;/h2&gt;
&lt;p&gt;This package is massive, so I’m not even going to try to list the functions it has.  However, you will probably use the seperator function:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;os.sep&lt;/code&gt;&lt;/strong&gt; - Returns the file path seperator for the current operating system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;glob-functions&quot;&gt;Glob Functions&lt;/h2&gt;
&lt;p&gt;Glob returns all of the path names that match some specified pattern.  The functions use the glob rules defined by the Unix shell.  If you don’t know these rules, &lt;a href=&quot;https://en.wikipedia.org/wiki/Glob_(programming)#Syntax&quot; target=&quot;_blank&quot;&gt;check them out on wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code&gt;glob.glob(pathname)&lt;/code&gt;&lt;/strong&gt; - Returns a list of all pathnames in the pwd that match the glob rules given in &lt;code&gt;pathname&lt;/code&gt;.  For instance, “jo*” is a right wildcard and matches anything that starts with “jo”, eg “joe”, “joseph”, etc., but not “dojo”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;code&gt;glob.iglob(pathname)&lt;/code&gt;&lt;/strong&gt; - Returns the same thing, but as an iterator.  This is great, as it doesn’t store all of the file names, but you can recover them easily.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Yes, this is a ridiculously short and unsatisfactory blog post.  You’ll understand why as you start working with these packages.  They are massive (except glob) and very powerful.  It turns out I bit off more than I could chew by deciding to write this post, but hey, maybe someone will use these functions and benefit from having them all in one place!&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>03 - A Scrapy Webspider</title>
    <link href="https://tyler-abbot.github.io/programming/a-scrapy-webspider/"/>
    <updated>2015-09-13T10:05:22+02:00</updated>
    <id>https://tyler-abbot.github.io/programming/a-scrapy-webspider</id>
    <author>
      <name>Tyler Abbot</name>
      <uri>https://tyler-abbot.github.io/</uri>
      <email>tyler.abbot@sciencespo.fr</email>
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-a-project&quot;&gt;Creating a Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#defining-items-to-extract&quot;&gt;Defining Items to Extract&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#writing-a-spider&quot;&gt;Writing a spider&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#writing-a-pipeline&quot;&gt;Writing a Pipeline&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;p&gt;How to use Scrapy.  This is basically a summary of the &lt;a href=&quot;http://doc.scrapy.org/en/1.0/intro/tutorial.html&quot; target=&quot;_blank_&quot;&gt;Scrapy tutorial&lt;/a&gt;.  As an example, we’ll make a web crawler to scrape the &lt;a href=&quot;econ.sciences-po.fr&quot; target=&quot;_blank_&quot;&gt;Sciences Po Economics Department website&lt;/a&gt; for seminar information.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-project&quot;&gt;Creating a Project&lt;/h2&gt;
&lt;p&gt;Scrapy automatically generates a directory containing a set of files you will need.  Simply open a terminal, navigate to the directory where you’d like to store your crawler, and type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;scrapy startproject PiPoCrawl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s it!  You now have a full Scrapy project.  The project folder contains several files that we will need to use.  The &lt;code&gt;items.py&lt;/code&gt; file is where you define what you would like to find.  The &lt;code&gt;pipelines.py&lt;/code&gt; is for managing output.  The &lt;code&gt;settings.py&lt;/code&gt; file is pretty self explanatory and the &lt;code&gt;spiders&lt;/code&gt; folder is where you will store all of your creepy crawlies.&lt;/p&gt;

&lt;h2 id=&quot;defining-items-to-extract&quot;&gt;Defining Items to Extract&lt;/h2&gt;
&lt;p&gt;Items work like Python dictionaries.  It is actually possible to use dictionaries, but Scrapy prefers Items, as they have apparently optimized their program for these.  You define the Item class yourself, specifying what information you would like to have output from the spider.  The Scrapy Item class must be defined withing the &lt;code&gt;items.py&lt;/code&gt; file.  So edit that file.  For now, our &lt;code&gt;items.py&lt;/code&gt; file looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scrapy&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipocrawlItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that I’m ommitting the comments that are automatically generated by Scrapy, but you don’t have to (this may seem obvious, but keep in mind that not everyone is a programming guru like yourself…).  &lt;/p&gt;

&lt;h2 id=&quot;writing-a-spider&quot;&gt;Writing a spider&lt;/h2&gt;
&lt;p&gt;Although I suffer from arachnophobia, we are going to check out a spider…  A spider is a python class that defines how we would like to perform our scraping.  They tell scrapy how to crawl (eg follow links), how to extract the data, etc.&lt;/p&gt;

&lt;p&gt;I’ve created a spider called &lt;code&gt;pipo_spider.py&lt;/code&gt; that scrapes the home page of the Sciences Po Economics Department for seminar information.  The script looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scrapy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PiPoCrawl.items&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PipocrawlItem&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipocrawlSpider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Spider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pipo&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;allowed_domains&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;econ.sciences-po.fr&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;http://econ.sciences-po.fr/&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//div[@class=&amp;#39;my_agenda&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seminar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;#NOTE: You need to include the period in the xpath expression to&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# make it relative.  Otherwise, you will start from the begining&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;#NOTE: Including the text() specification in the xpath drops the&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# html surrounding the content&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PipocrawlItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seminar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.//strong/text()&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;#NOTE: Notice the nested selector to get the link text&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seminar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.//span[@class=&amp;#39;titre&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.//a/text()&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seminar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.//span[@class=&amp;#39;desc&amp;#39;]/text()&amp;quot;&lt;/span&gt;
                                                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s look at the parts of this file individually.  First, you have to import your custom Items class, using &lt;code&gt;from PiPoCrawl.items import PipocrawlItem&lt;/code&gt;.  Next, you define your spider class and give it some attributes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;name&lt;/code&gt; defines the name of your spider so you can call it from the command line.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;allowed_domains&lt;/code&gt; defines the site within which your spider is allowed to crawl.  Here, we limit it to the Economics Department’s website.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;start_urls&lt;/code&gt; tels the spider some starting points, as many as you would like to provide.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we can define a &lt;code&gt;parse()&lt;/code&gt; method within our spider class to process the webiste content.  Here you have the liberty to do as you please and I found that the most difficult step in this process was identifying what you want and how to differentiate it.  For this case, I noticed that all of the seminar entries are defined as &lt;code&gt;div&lt;/code&gt; objects of a class called &lt;code&gt;my_agenda&lt;/code&gt;.  Because of this, it is possible to identify all of the individual entries.  So, the first thing to do is to extract all of these entries:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//div[@class=&amp;#39;my_agenda&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command calls the &lt;code&gt;response&lt;/code&gt; object, containing the raw html source of the webpage, and applies an xpath selector.  What the heck is that?! &lt;a href=&quot;http://www.w3.org/TR/xpath/&quot; target=&quot;_blank_&quot;&gt;XPath&lt;/a&gt; is a “language for addressing parts of an XML document”, whatever that means.  If you would like to learn more about XPath and the syntax of these calls, refer to this &lt;a href=&quot;http://infohost.nmt.edu/tcc/help/pubs/xslt/xpath-sect.html&quot; target=&quot;_blank_&quot;&gt;New Mexico Tech Reference&lt;/a&gt;, but it is quite dense.  You might be better off just googling specific examples if you don’t do much web programming (like me!).&lt;/p&gt;

&lt;p&gt;In the example above, the selector looks through the html code and selects all of the instances of &lt;code&gt;&amp;lt;div&amp;gt; ... &amp;lt;\div&amp;gt;&lt;/code&gt; that are of the class &lt;code&gt;my_agenda&lt;/code&gt;, placing these into a SelectorsList object.  The nice thing about this object is that you can again use the &lt;code&gt;xpath&lt;/code&gt; method, nesting text selection.  Anywho, next we loop over the list objects, each one representing a calendar entry.  We have the following loop:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seminar&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PipocrawlItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seminar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.//strong/text()&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seminar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.//span[@class=&amp;#39;titre&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.//a/text()&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seminar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.//span[@class=&amp;#39;desc&amp;#39;]/text()&amp;quot;&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For each loop, we define an instance of &lt;code&gt;PipocrawlItem()&lt;/code&gt; and populate it by scraping the text.  First, take a look at the html of an entry in &lt;code&gt;events&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;agenda_4&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;my_agenda&amp;#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;21-09-2015&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;titre&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;titre_4&amp;#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/departmental-seminar-rob-shimer-university-chicago&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Departmental Seminar : Rob SHIMER (University of Chicago)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;desc&amp;#39;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;texte_4&amp;#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; Title: TBA

	The next Departmental Seminar will host Georgy EGOROV (Kellogg School of Management)&lt;span class=&quot;ni&quot;&gt;&amp;amp;nbsp;&lt;/span&gt; on September 28th.

	Seminar organized by Elise Huillery and Guillaume Plantin
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that the date always comes first and is surrounded by the &lt;code&gt;&amp;lt;strong&amp;gt;...&amp;lt;/strong&amp;gt;&lt;/code&gt; decorator.  So, we can use the &lt;code&gt;.extract_first()&lt;/code&gt; method.  The syntax within the xpath call is important.  We must include the &lt;code&gt;.&lt;/code&gt; so that xpath knows we want a relative selector, not an absolute one.  This means we would like to select from a single element of &lt;code&gt;events&lt;/code&gt;, not from the entire object.  &lt;code&gt;//strong/text()&lt;/code&gt; specifies the decorator we are looking for and that we want only the text, dropping the &lt;code&gt;&amp;lt;strong&amp;gt;...&amp;lt;/strong&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The other two selectors work in the same way, but notice that we select twice for &lt;code&gt;item['title']&lt;/code&gt;.  This is a nested selection and is needed because the text of the title is also a link.  Finally, yield prints the output, giving us the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u&amp;#39;21-09-2015&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&amp;#39; Title: TBA&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\t\r\n\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;The next Departmental Seminar will host Georgy EGOROV (Kellogg School of Management)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xa0&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; on September 28th.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n\t\r\n\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Seminar organized by Elise Huillery and Guillaume Plantin&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&amp;#39; Departmental Seminar : Rob SHIMER (University of Chicago)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that’s it!  That is a spider!  The hardest part, for me at least, was figuring out a way to identify the item you would like to scrape.&lt;/p&gt;

&lt;h2 id=&quot;writing-a-pipeline&quot;&gt;Writing a Pipeline&lt;/h2&gt;
&lt;p&gt;According to the Scrapy tutorial, the easiest way to store your data is to use a command modifier to export your information to a &lt;code&gt;.json&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;scrapy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crawl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is all you need if you simply want to store your scraped data.  However, if you would like to do more to your data before saving it, you might consider a pipeline.  For this example, we’ll write a pipeline to clean up the items in our data.  In particular, the description of calendar events has many line break markers (&lt;code&gt;\r&lt;/code&gt; or &lt;code&gt;\n&lt;/code&gt;) that just make things look messy.&lt;/p&gt;

&lt;p&gt;First, we need to edit our &lt;code&gt;pipelines.py&lt;/code&gt; script.  Here’s how the completed file looks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PipocrawlPipeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;replaceable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;u&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\xa0&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;u&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replaceable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you know of a better way to do this, so do I!  You can avoid this problem by wrapping the selector in the spider script with another function, but this is just to show how a pipeline works.&lt;/p&gt;

&lt;p&gt;This file defines a pipeline class which is run on every item.  What it does is fairly straight forward, looping through the items and replacing any line break, tabs, etc. with emtpy space or a single space.  To make Scrapy use this pipeline, you do not need to add any code to the spider script, simply uncomment the &lt;code&gt;ITEM_PIPELINES&lt;/code&gt; option in the &lt;code&gt;settings.py&lt;/code&gt; file and add your pipeline, along with a reference:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;ITEM_PIPELINES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;#39;PiPoCrawl.pipelines.PipocrawlPipeline&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The reference number simply tells Scrapy in what order to run your pipelines.  You can do many other things with a pipeline, but you’ll have to discover all that for yourself!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using Scrapy to create web crawlers is fairly straight forward, once you get down the syntax and the file structure.  You can also make your web crawler follow links, but I’ll leave that for another post.  If you are interested in this example, I’ve posted the file folder on GitHub &lt;a href=&quot;https://github.com/tyler-abbot/PiPoCrawl&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>02 - Posting to Websites in Python</title>
    <link href="https://tyler-abbot.github.io/programming/request_package/"/>
    <updated>2015-06-22T10:27:01+02:00</updated>
    <id>https://tyler-abbot.github.io/programming/request_package</id>
    <author>
      <name>Tyler Abbot</name>
      <uri>https://tyler-abbot.github.io/</uri>
      <email>tyler.abbot@sciencespo.fr</email>
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#different-methods-to-do-the-same-things&quot;&gt;Different Methods to Do the Same things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#requests&quot;&gt;Requests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-we-are-going-to-do&quot;&gt;What We Are Going to Do&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-initial-get&quot;&gt;The Initial Get&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;p&gt;For the last couple weeks I’ve been doing some house keeping before going on vacation.  I’m working on a paper using PSID panel data and want to do my work in Python.  The problem is that the PSID data comes in SAS format, with a .txt ASCII file containing the data and a .sas (or .do or .spss) file containing instructions on how to interpret the file.  In order to deal with these files, &lt;a href=&quot;https://floswald.github.io/&quot; target=&quot;_blank_&quot;&gt;Florian Oswald&lt;/a&gt; has written an R package to download the data and build a panel.  I’ve been transcribing the package into Python and struggled for several days with posting to the online form in order to login and download data.  This post is about how to do that and what I found to be the easiest solution.&lt;/p&gt;

&lt;h2 id=&quot;different-methods-to-do-the-same-things&quot;&gt;Different Methods to Do the Same things&lt;/h2&gt;
&lt;p&gt;The standard for connecting to a website from Python, R, etc., is cURL, a free software library for transferring data through http.  The problem is that in Python the libcurl wrapper is not at all pythonic.  Unless you are familiar with using http you will struggle, as I did, for days trying to get the functions to work.  As usual, though, there is a module to fix that!&lt;/p&gt;

&lt;p&gt;The slogan for the &lt;a href=&quot;http://docs.python-requests.org/en/latest/&quot; target=&quot;_blank_&quot;&gt;Requests&lt;/a&gt; module is “HTTP for Humans”.  Ah, finally something I can understand!  The module does all of the heavy lifting for you and even anticipates some of your needs.  I encourage you, if you are going to be using it at all often, to get familiar with what the package can do by perusing the read me.  This will also give you a chance to learn about http if you are unfamiliar (as I was).&lt;/p&gt;

&lt;h2 id=&quot;requests&quot;&gt;Requests&lt;/h2&gt;
&lt;p&gt;So to get started, let’s see how to make a simple request (this example is taken from the Requests website).  First, import requests (given that you’ve already installed the module):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Requests is object oriented, so you post requests to a webpage and the generated object contains all of the response information you might need.  For example, run&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;https://api.github.com/events&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The returned &lt;code&gt;r&lt;/code&gt; object contains a bunch of methods you can use to retrieve information from the returned html.  For instance &lt;code&gt;r.url&lt;/code&gt; will return the associated &lt;code&gt;url&lt;/code&gt;, while &lt;code&gt;r.text&lt;/code&gt; will return the entire &lt;code&gt;html&lt;/code&gt; webpage.  There a ton of methods that are very useful, so I suggest you get familiar by reading the user guide.&lt;/p&gt;

&lt;h2 id=&quot;what-we-are-going-to-do&quot;&gt;What We Are Going to Do&lt;/h2&gt;
&lt;p&gt;So, in order to save time and space I’m going to combine two topics here.  We’ll take as a working example posting to the PSID website to login.  If you want to follow along, I suggest you register for an account &lt;a href=&quot;http://simba.isr.umich.edu/U/Login.aspx&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;.  The PSID Data Center is what is known as an ASP web application.  That really just refers to the architecture on which the site is built, but it has implicaitons for posting a login to the page.  ASP sites often have different requirements for form fields, or the information they need in order to allow you to login.  Because of this there are two things that you will need to do: scrape and post.&lt;/p&gt;

&lt;p&gt;First of all, you must scrape the page.  What does this mean?  To better explain, follow these steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First of all, navigate to the PSID login page linked above.&lt;/li&gt;
  &lt;li&gt;Right click on the login field (or anywhere for that matter) and click “Inspect Element”.&lt;/li&gt;
  &lt;li&gt;Navigate to the network tab and click on the clear button (similar to a &lt;a href=&quot;https://www.google.fr/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=do%20not%20sign&quot; target=&quot;_blank_&quot;&gt;“Do Not…”&lt;/a&gt; symbol in the states).&lt;/li&gt;
  &lt;li&gt;Now login using your username and password.  In the inspect element field you should see a bunch of information appear.  If not, start over because you must have done something wrong.  My screen looks like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_screen.png&quot; alt=&quot;Screen&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;One of the elements (probably the first) will be &lt;code&gt;Login.aspx&lt;/code&gt;.  Click on this and it will pop up a frame with several tabs.  Select &lt;code&gt;Headers&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Scroll down to &lt;code&gt;Form Data&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You made it!  What you are looking at is a list of the required fields to post a login form on the PSID website.  In order for your program to login you must provide all of this information.  When writing a program to post a form, this is the first thing you should do to find out what fields you need to know.&lt;/p&gt;

&lt;p&gt;So, in order to login we’ll follow the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Post a &lt;code&gt;request&lt;/code&gt; to the page to retrieve the &lt;code&gt;html&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;“Scrape” the page to find the required form field values.&lt;/li&gt;
  &lt;li&gt;Re-post a &lt;code&gt;request&lt;/code&gt; to login.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But wait, what is scraping!?  Scraping refers to searching a webpage for key terms.  This is how Google builds its search results (or one of the many steps in what they do).  We don’t actually have to do all the work to do this, as &lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/&quot; target=&quot;_blank_&quot;&gt;Beautiful Soup&lt;/a&gt; is going to do all of it for us.  So let’s get down to business.&lt;/p&gt;

&lt;h2 id=&quot;the-initial-get&quot;&gt;The Initial Get&lt;/h2&gt;
&lt;p&gt;Since we’ve already imported requests, the first thing we’ll do is create a &lt;code&gt;requests&lt;/code&gt; session object and define the login url:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;http://simba.isr.umich.edu/u/login.aspx&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we want to retrieve the &lt;code&gt;html&lt;/code&gt; for the page:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, use the Beautiful Soup package to scrape the page and define a &lt;code&gt;params&lt;/code&gt; dictionary object that contains all of your form variables:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#Import Beautiful Soup&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bs4&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Use the beautifulsoup package to scrape for form variables&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;viewstate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;__VIEWSTATE&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;radscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RadScriptManager1_TSM&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;viewstategenerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;__VIEWSTATEGENERATOR&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eventvalidation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;__EVENTVALIDATION&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;radscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                         &lt;span class=&quot;s&quot;&gt;&amp;quot;RadScriptManager1_TSM&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Gather form data into a single dictionary&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;RadScriptManager1_TSM&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39;__EVENTTARGET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39; __EVENTARGUMENT&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39;__VIEWSTATE&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewstate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39;__VIEWSTATEGENERATOR&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewstategenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39;__EVENTVALIDATION&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventvalidation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39;ctl00$ContentPlaceHolder1$Login1$UserName&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39;ctl00$ContentPlaceHolder1$Login1$Password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39;ctl00$ContentPlaceHolder1$Login1$LoginButton&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Log In&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;#39;ctl00_RadWindowManager1_ClientState&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You’ll want to replace &lt;code&gt;USERNAME&lt;/code&gt; and &lt;code&gt;PASSWORD&lt;/code&gt; with your own.  Notice that I left some of the form fields blank.  This is because they are blank whenever I submit this form, but I kept them here in case it is different for others.&lt;/p&gt;

&lt;p&gt;Now, post the form:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Referer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://psidonline.isr.umich.edu/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the &lt;code&gt;headers={&quot;Referer&quot;: &quot;http://psidonline.isr.umich.edu/&quot;}&lt;/code&gt; tells the website that you came from within the site and are not just posting the form directly (which is actually what you are doing, but the site doesn’t seem to like that…).  Now the reason for using the session object should become clear.  &lt;code&gt;c&lt;/code&gt; now contains a cookie that you can use to move within the site.  For example, let’s say you wanted to download a the zipped family interview files from 1968.  Then you could simply run the following line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;http://simba.isr.umich.edu/Zips/GetFile.aspx?file=1056&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;allow_redirects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now &lt;code&gt;data&lt;/code&gt; contains a binary zip file with the data you requested.  You can use the ZipFile module to unzip and save this, but that’s for another post!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall, posting to webpages is not something that I or other economists need to do very often.  However, when we do need to do it it is because we need data.  These data files can sometimes be large or there could be many of them.  Using the &lt;code&gt;requests&lt;/code&gt; package to automate logging into a database can save us tons of time, as we can let the computer do all of the work for us!  In any case, if you have any comments or questions, please let me know!&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>05 - Email Forms in Jekyll Site</title>
    <link href="https://tyler-abbot.github.io/programming/email-forms-in-jekyll-site/"/>
    <updated>2015-05-31T14:53:20+02:00</updated>
    <id>https://tyler-abbot.github.io/programming/email-forms-in-jekyll-site</id>
    <author>
      <name>Tyler Abbot</name>
      <uri>https://tyler-abbot.github.io/</uri>
      <email>tyler.abbot@sciencespo.fr</email>
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#why-doesnt-it-work&quot;&gt;Why doesn’t it work?!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-original-form-and-a-bit-about-php-mail&quot;&gt;The original form and a bit about PHP mail()&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sendgrid-and-the-new-contact-form&quot;&gt;SendGrid and the new contact form&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;div class=&quot;notice&quot;&gt;
    &lt;p&gt;&lt;h5&gt;Disclaimer:&lt;/h5&gt;&lt;/p&gt;
    &lt;p&gt;This post is incomplete and is left here as a cry for help!  I have struggled for days with this.  If anyone stumbles upon this post and has advice on how to incorporate a contact form into markdown, I would greatly appreciated it...&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I’ve recently been working on a project to start a non-profit and wanted to build a website.  I used the &lt;a href=&quot;http://jekyllthemes.org/themes/agency/&quot; target=&quot;_blank_&quot;&gt;Agency theme&lt;/a&gt;.  You can check out my finished product &lt;a href=&quot;http://www.allochory.org&quot; target=&quot;_blank_&quot;&gt;here&lt;/a&gt;.  Although a great theme and really easy to get set-up, I ran into trouble with the e-mail form.  I contacted the theme creator, &lt;a href=&quot;https://github.com/y7kim&quot; target=&quot;_blank_&quot;&gt;Rick Kim&lt;/a&gt;, and he imparted some knowledge about static websites that I would like to share with you, as well as aggregate some useful information for adding an e-mail form to a static website.&lt;/p&gt;

&lt;h2 id=&quot;why-doesnt-it-work&quot;&gt;Why doesn’t it work?!&lt;/h2&gt;
&lt;p&gt;So I built this little one page site off the theme in an afternoon and was very proud of myself, but then couldn’t get the email form to work.  After spending a day reading about it and stumbling around the internet, I heard back from Rick and he explained something about static websites.  Because a static html website is just a set of files, it can’t generate an e-mail from a contact form.  You need to either include a third party contact form or use an e-mail service.  I went with the latter choice, using &lt;a href=&quot;https://sendgrid.com&quot; target=&quot;_blank_&quot;&gt;SendGrid&lt;/a&gt;.  What follows is a bit about how I hotwired the standard form to make my e-mail form work.&lt;/p&gt;

&lt;h2 id=&quot;the-original-form-and-a-bit-about-php-mail&quot;&gt;The original form and a bit about PHP mail()&lt;/h2&gt;
&lt;p&gt;The form in the original Agency theme uses the PHP mail() function.  This function is apparently notorious for being difficult to debug.  A “false” output could be anything from a bad input value to your e-mail DNS being improperly configured.  To add to the problem, the GitHub page cannot even run the function!  Enter a third party.&lt;/p&gt;

&lt;h2 id=&quot;sendgrid-and-the-new-contact-form&quot;&gt;SendGrid and the new contact form&lt;/h2&gt;
&lt;p&gt;SendGrid is a transactional and marketing email service.  The company was designed by developers to better serve companies e-mail needs.  What we need is their transactional service, which takes on the responsibility of running an e-mail server for you and provides analytics about traffic.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>04 - Text Editors</title>
    <link href="https://tyler-abbot.github.io/programming/text-editors/"/>
    <updated>2015-05-10T10:20:57+02:00</updated>
    <id>https://tyler-abbot.github.io/programming/text-editors</id>
    <author>
      <name>Tyler Abbot</name>
      <uri>https://tyler-abbot.github.io/</uri>
      <email>tyler.abbot@sciencespo.fr</email>
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#why-this-post-is-so-one-sided&quot;&gt;Why This Post Is So One Sided&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-atom&quot;&gt;Installing Atom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-atom&quot;&gt;Using Atom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sweet-packages&quot;&gt;Sweet Packages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;p&gt;This post is meant to help you get started programming as quickly as possible and, if you are already familiar with text editors, is pretty one sided.  We are going to talk about how to install and use &lt;a href=&quot;https://www.atom.io&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;Atom&lt;/strong&gt;&lt;/a&gt;, the open-source text editor from GitHub.&lt;/p&gt;

&lt;h2 id=&quot;why-this-post-is-so-one-sided&quot;&gt;Why This Post Is So One Sided&lt;/h2&gt;
&lt;p&gt;When I first started programming (at least in the recent past) I did so in Python and wanted to do the cool things that the cool programmers were doing, so I jumped straight in with &lt;a href=&quot;https://www.vim.org&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;Vim&lt;/strong&gt;&lt;/a&gt;.  If you ask any professional Unix programmer, there are only two text editors, Vim and Emacs, but these two programs are like the great pyramids.  They are incredibly powerful and useful for those who know how to use them, but for others they are like learning to read hyroglyphs.  For example, the first time I set up Vim I spent an entire day just trying to find and edit my vimrc file to change the colorscheme, because if you know where it is then no problem, but if you don’t then you are lost and no one else seems to have the same problem!!!  Oh, and add the fact that keyboard shortcuts are completely different from standards, like “copy” is “y” for “yank”.&lt;/p&gt;

&lt;p&gt;That little rant over, this post is about how to get started quickly with a versatile, cheap, and nice text editor.  Atom is all of these.  GitHub developed Atom as a free, open source text editor with their own development needs in mind.  Apparently Atom is very similar to another editor, &lt;a href=&quot;https://www.sublimetext.com&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;Sublime&lt;/strong&gt;&lt;/a&gt;, but Atom has near weekly new releases and is free, compared to yearly releases and a $70 price tag.  So, we’ll see how easy Atom is to install and set-up, then we’ll talk a little about other options… maybe.&lt;/p&gt;

&lt;p&gt;If you’re interested in some reviews or comparisons, check out these links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.takipi.com/sublime-vs-atom-text-editor-battles/&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;Sublime v. Atom&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Comparison_of_text_editors&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;All text editors ever, forever… seriously.&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://lifehacker.com/five-best-text-editors-1564907215&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;Comparing the “top 5”.&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;installing-atom&quot;&gt;Installing Atom&lt;/h2&gt;
&lt;p&gt;The first thing you should do is head over to the &lt;a href=&quot;https://atom.io/docs&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;Atom Documentation.&lt;/strong&gt;&lt;/a&gt;  You can follow the “Getting Started” link, where you’ll learn about Atom and then how to install Atom on Apple, Windows, Debian, or Redhat, all in about 5 minutes.&lt;/p&gt;

&lt;div class=&quot;notice-info&quot;&gt;
    &lt;h5&gt;Watch out!&lt;/h5&gt; Don't make the same mistake as I did and install the webupd8 version.  You will not have the correct path and installing package will not work properly.  Follow these steps for Ubuntu.
&lt;/div&gt;

&lt;p&gt;If you are using Ubuntu, life used to be terrible and you would have to build Atom from scratch.  However, you can now download the debian version and install Atom in a snap.  To install atom, first download the debian file from the &lt;a href=&quot;http://atom.io&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;Atom home page&lt;/strong&gt;&lt;/a&gt;.  Then simply pop open a terminal (by typing &lt;code&gt;ctrl + alt + t&lt;/code&gt;) and then type the following&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Downloads
sudo dpkg --install atom-amd64.deb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s it! Atom is installed and you can start programming! So easy.&lt;/p&gt;

&lt;h2 id=&quot;using-atom&quot;&gt;Using Atom&lt;/h2&gt;
&lt;p&gt;Now that you have Atom installed, what features of Atom are most useful for Python programming, R, etc.?  Well, I installed Atom this morning to write this post and I am already in love with it.  Seriously, I have been using it for an hour and this is what my screen looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tyler-abbot.github.io/images/atom_screen_1.png&quot; alt=&quot;atom_screen_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I can edit in multiple languages in different panes, there is a file tree that I can use to navigate to new files, and the default color-scheme and syntax highlighting are great.  That being said, the fact that Atom is open source and modular means that there are a ton of cool packages you can download.  I’m going to try some out and describe them here, but there are many more so have fun and get your set-up just how you want it!&lt;/p&gt;

&lt;h2 id=&quot;sweet-packages&quot;&gt;Sweet Packages&lt;/h2&gt;
&lt;p&gt;First of all, one of the great things about Atom is its ease of use.  You can type &lt;code&gt;cntrl+shift+p&lt;/code&gt; to get a search bar, from which you can simply search for the packages you want, or settings or whatever else you are interested in.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/AtomLinter/Linter&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;Linter.&lt;/strong&gt;&lt;/a&gt;  This package is a great idea, indicating errors inline, while you type.  You can install different packages for different languages.  However, I’m personally having some troubles with the &lt;code&gt;$PATH&lt;/code&gt; variable, so I’ll update this if I can ever get it working.  &lt;strong&gt;UPDATE:&lt;/strong&gt; In Ubuntu, you need to install flake8, not only as a package, but as an executable.  Run the following in the terminal then use the output to update the executable dir in the settings of linter-flake8 in Atom.  That should do it!&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apt-get install python-flake8
which flake8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://atom.io/packages/ask-stack&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;Ask-stack.&lt;/strong&gt;&lt;/a&gt; Oh. My. Goodness.  This package will make your life wonderful if you are new to programming.  It allows you to seach Stack Exchange for answers to questions directly in Atom.  Personally, when I first started using Python I spent half my time on Stack Exchange trying to figure out how to do things.  I haven’t used this package much, so I don’t know much about its interface, but I’m sure I’ll be using it in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope you enjoy Atom, but if you want to be a cool kid and suffer through years of learning a new program, go check out Vim, Emacs, or any of the other text editors out there.  Overall, it’s probably best to at least be able to talk shop about them and lament your struggles with people… although that makes it sound like my social circle is pretty limited…&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>03 - GitHub</title>
    <link href="https://tyler-abbot.github.io/programming/github/"/>
    <updated>2015-04-26T18:31:06+02:00</updated>
    <id>https://tyler-abbot.github.io/programming/github</id>
    <author>
      <name>Tyler Abbot</name>
      <uri>https://tyler-abbot.github.io/</uri>
      <email>tyler.abbot@sciencespo.fr</email>
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction-to-github&quot;&gt;Introduction to GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#signing-up-for-github&quot;&gt;Signing Up for GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-a-repository&quot;&gt;Creating a Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-files-to-a-repository&quot;&gt;Adding Files to a Repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#further-reading&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;p&gt;I signed up for GitHub to create this website and the whole process seemed incredibly difficult and vague.  In this post I’m going to introduce GitHub and really quickly describe signing up, creating a repository, and editing that repository.  If you want a more hands on and thorough lesson, you should head over to Code School for their &lt;a href=&quot;https://www.codeschool.com/courses/try-git&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;Try Git&lt;/strong&gt;&lt;/a&gt; course.&lt;/p&gt;

&lt;h2 id=&quot;introduction-to-github&quot;&gt;Introduction to GitHub&lt;/h2&gt;
&lt;p&gt;Git is a file sharing website.  That’s it.  But the real power in Git comes from the ability to download, update, and share code easily.  Essentially, if there is an open source project that you would like to contribute to, you can “fork” that repository.  Then, if you would like to share your changes, you simply submit a “pull request” to the repository’s author.  They can see by your profile what you have done and how trustworthy you are.&lt;/p&gt;

&lt;p&gt;Also, one bonus of git is their free website hosting (which is where this website is) through GitHub Pages.  If you would like to set up a GitHub website, check out this &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;page&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;signing-up-for-github&quot;&gt;Signing Up for GitHub&lt;/h2&gt;
&lt;p&gt;Creating a GitHub account is really easy.  Just go to &lt;a href=&quot;https://github.com/&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;https://github.com/&lt;/strong&gt;&lt;/a&gt; and follow the steps.  You’ll also need to &lt;a href=&quot;http://git-scm.com/downloads&quot; target=&quot;blank&quot;&gt;&lt;strong&gt;download and install&lt;/strong&gt;&lt;/a&gt; git.  You might want to use a GUI client, but it is up to you how you want to work with Git.  This tutorial will use the command line.&lt;/p&gt;

&lt;h2 id=&quot;creating-a-repository&quot;&gt;Creating a Repository&lt;/h2&gt;
&lt;p&gt;The first thing you need to do is to create a repository on your GitHub page by clicking on the little ‘+’ sign in the upper right hand corner.  This will take you to a page that will give you options for creating repositories from the command line in the future.  You’ll also be given a URL for your repository, which you should copy to the clipboard.  Click on the README link to create a readme file in your repository and add some blablabla, then save the changes.&lt;/p&gt;

&lt;p&gt;Next, you need to create a local repository.  In the terminal, &lt;code&gt;cd&lt;/code&gt; into whatever directory you want to be the parent directory of your local git repository.  Once there, type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/blablabla&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;… obviously replacing the url by the one you just copied.  This will copy all of the files from your repository on GitHub and intitialize your local repository.  &lt;/p&gt;

&lt;h2 id=&quot;adding-files-to-a-repository&quot;&gt;Adding Files to a Repository&lt;/h2&gt;

&lt;p&gt;Now that you have a repository, let’s learn to make some changes.  First, create any kind of file in the local repository you want.  Seriously, just save a .txt haiku about your cat, it doesn’t really matter.  Now that it is done, type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git status&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see a red &lt;code&gt;cat_haiku.txt&lt;/code&gt;.  This means there is a new file in your local repository that has not yet been staged.  What you need to do is add your new file to the staging area.  There are several ways to do this, by name, by file type, etc., but one nice one is to just add ALL of the new files:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add --all&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now if you run &lt;code&gt;git status&lt;/code&gt; again, you’ll see that &lt;code&gt;cat_haiku.txt&lt;/code&gt; is ready to commit.  Finally, to commit the changes to the repository, type the following&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;A message&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;-m &quot;A message&quot;&lt;/code&gt; allows you to include the commit message directly in the command line (try doing this command without it, it is really not fun).&lt;/p&gt;

&lt;p&gt;Now, your updated project is saved in the GitHub repository, but it is not yet shared.  In fact, the new haiku won’t even show up on your personal page.  How will anyone read it!?  The last thing you need to do is to push the repository.  Type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You’ll be prompted for your username and password.  Once that’s done you can celebrate!&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;Git is a really powerful tool, but I guess the assumption is that you are a computer programmer who knows all about this stuff, because the how-to guides are pretty difficult to find/hard to understand.  However, I stumbled across &lt;a href=&quot;https://sethrobertson.github.io/GitBestPractices/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; great page that gathers a bunch of useful links into one place.  I highly recommend you take a few hours to read and learn about everything Git can do and how to use it.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>01 - Why Python? I Already Know R!</title>
    <link href="https://tyler-abbot.github.io/programming/why-python-i-already-know-r/"/>
    <updated>2015-04-16T18:13:19+02:00</updated>
    <id>https://tyler-abbot.github.io/programming/why-python-i-already-know-r</id>
    <author>
      <name>Tyler Abbot</name>
      <uri>https://tyler-abbot.github.io/</uri>
      <email>tyler.abbot@sciencespo.fr</email>
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#what-are-the-differences-between-r-and-python&quot;&gt;What are the differences between R and Python?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#which-should-i-choose&quot;&gt;Which should I choose?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#where-are-things-heading&quot;&gt;Where are things heading?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Python and R are both widely used in the sciences and social sciences, but the two tend to be used by different user groups.&lt;/p&gt;

&lt;p&gt;R was developed by statisticians for statisticians.  Originally developed by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, in 1993, the language has taken the statistical field by storm.  Actually, you can’t quite call R a language… unlike Python, R is a software environment geared specifically towards statistics.  That means that R is similar to Matlab or Stata, but OpenSource.  It’s not clear from the 20 minutes I spent trying to figure out how R works exactly what the program does, but as far as I can tell R is a highlevel language interpreter similar to Python, except without some of the liberties.&lt;/p&gt;

&lt;p&gt;Python was developed by computer programmers for everyone.  In the late 1980’s, Guido van Rossum developed an interpreter and language as a hobby (!) and since then the “core philosophy” of python has become the “zen of Python” (just open up ipython and type &lt;code&gt;import this&lt;/code&gt;).  The overall thrust is to make the programming experience as easy as possible.  Essentially, when you execute Python code, the program is parsed, compiled, and interpreted.  Compared to a language like C++, the process is similar, but you don’t actually have to carry out the steps yourself in Python!  However, if you are new to Python, the whole experience can often seem like trying to kill a fly with a cannonball.  With a bit of practice, though, you can find a workflow that works well for you.&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-differences-between-r-and-python&quot;&gt;What are the differences between R and Python?&lt;/h2&gt;
&lt;p&gt;There are several key differences between R and Python, including versatility, available packages, and usability.&lt;/p&gt;

&lt;p&gt;One of the biggest benefits and downfalls for R is its precise focus on statistics.  If there is a cutting edge statistical method, from econometrics to biometrics, it is surely available as an R package.  However, the development of the project let fall some of the freedom one needs to deal with big-data.  As is described in &lt;a href=&quot;https://blogs.oracle.com/R/entry/what_is_r&quot;&gt;this&lt;/a&gt; article, R is only single thread and can create duplicate data objects that quickly overload the onboard memory.  Because of this, R becomes unsuitable for big-data applications or massive computation.  This is where Python really shines, through packages like &lt;a href=&quot;http://documen.tician.de/pycuda/&quot; target=&quot;_blank&quot;&gt;PyCuda&lt;/a&gt;, &lt;a href=&quot;http://pypy.org/&quot; target=&quot;_blank&quot;&gt;PyPy&lt;/a&gt;, and &lt;a href=&quot;http://star.mit.edu/cluster/&quot; target=&quot;_blank&quot;&gt;StarCluster&lt;/a&gt;, that allow you to create massively parallel programs and/or run them easily on cloud computing services.&lt;/p&gt;

&lt;p&gt;Python truly falls short in terms of statistical analysis packages, but this seems to be changing.  R benefits from its specialty purpose, in that EVERY SINGLE PACKAGE created for R is used for statistics.  On the other hand, the number of contributors to Python is far greater than that for R, but the number of statisticians is much smaller.  However, that number is beginning to reach a critical mass such that statistical modules in Python must compete and are becoming better.  Alongside the traditional &lt;a href=&quot;http://pandas.pydata.org/&quot; target=&quot;_blank&quot;&gt;Pandas&lt;/a&gt; package, you now have new things like &lt;a href=&quot;http://statsmodels.sourceforge.net/stable/&quot; target=&quot;_blank&quot;&gt;StatsModels&lt;/a&gt; that have many of the tools you might be looking for.&lt;/p&gt;

&lt;p&gt;Finally, if you are just starting out with programming, Python may seem too daunting.  It is true that with tools like &lt;a href=&quot;http://www.rstudio.com/&quot; target=&quot;_blank&quot;&gt;RStudio&lt;/a&gt; you can work with R in a MatLab like graphical user interface that is easy and intuitive.  On the flipside, installing and learning to leverage Python involves downloading and installing text editors and setting path variables, etc. that may seem daunting to a newbie.  However, new tools like &lt;a href=&quot;http://lighttable.com/&quot; target=&quot;_blank&quot;&gt;LightTable&lt;/a&gt; are making the whole process more palatable.&lt;/p&gt;

&lt;h2 id=&quot;which-should-i-choose&quot;&gt;Which should I choose?&lt;/h2&gt;

&lt;p&gt;You’re not going to like this… but you should learn BOTH!  If you don’t already know a program like R or Python, then that means you are either a student or someone changing careers.  You are not mired in the tradition of R or too much of a programming wunderkind to shy-away from the one trick pony of R.  That being said, everyone you work with will know one or the other and if you want to be able to move from project to project with ease you need to know both.&lt;/p&gt;

&lt;p&gt;Personally, I am only familiar with academia.  Every professor will only know Matlab and (maybe) R, so in order to work with them it is necessary to be familiar.  But, the most cutting edge tools are in Python and large scale computation is heavy and slow in R, so in order to be able to compete in the future I see Python (or C++) as a necessity.&lt;/p&gt;

&lt;h2 id=&quot;where-are-things-heading&quot;&gt;Where are things heading?&lt;/h2&gt;

&lt;p&gt;Neither one of these languages is going anywhere soon.  That being said, I think that the number of passionate programmers and statisticians working on Python is growing in comparison to R and that in the future we’ll need more versatile tools.  I have spent so much time now in Python, that I don’t even consider opening up R, even for statistics, unless I need to work with someone else who doesn’t know Python.  That being said, I’ll soon be doing som complicated econometrics, so maybe I’ll dust off my R books and get back on the wagon.&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>02 - How to Make Posts in Jekyll.</title>
    <link href="https://tyler-abbot.github.io/programming/how-to-make-posts/"/>
    <updated>2015-04-12T14:55:42+02:00</updated>
    <id>https://tyler-abbot.github.io/programming/how-to-make-posts</id>
    <author>
      <name>Tyler Abbot</name>
      <uri>https://tyler-abbot.github.io/</uri>
      <email>tyler.abbot@sciencespo.fr</email>
    </author>
    <content type="html">
      
      &lt;p&gt;Ok, so this is a selfish post, but I have been struggling to get these posts looking good, so I’m leaving this here for later reference.  This post is just for me to learn a bit about octopress and some formatting stuff so if you’re an outsider, sorry for the clutter!  This probably won’t be very interesting.&lt;/p&gt;

&lt;p&gt;To spin up a local server navigate to the local repository folder and type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve --watch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To generate a post under some heading, open a terminal and navigate to the site folder.  Then, run the following code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundle exec octopress new post &quot;NAME_OF_POST&quot; --dir path/to/post &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will generate a markdown file at the appropriate point in the file tree.  Jekyll should automatically update the parent page to add a link to the post.&lt;/p&gt;

&lt;p&gt;If you would like to create a new page, the syntax is similar:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundle exec octopress new page path/to/page&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, jekyll will not automatically create the required links, so you’ll have to do this yourself.&lt;/p&gt;

&lt;h2 id=&quot;formatting-junk&quot;&gt;Formatting Junk&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Type&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;some code&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;HUZZZAAHHHH! The above code took a long time to find, so here’s how it goes in markdown:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;highlight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;python&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;linenos&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; import numpy
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; print(&amp;quot;foobar&amp;quot;)
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endhighlight&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To add headlines, type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; HEADLINE
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; --------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can add hash tags to the front to change the size of the header.&lt;/p&gt;

&lt;p&gt;If you want a link that opens in a new tab use&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;www.website.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Link Text&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    </content>
  </entry>
  
  <entry>
    <title>01 - Packages.</title>
    <link href="https://tyler-abbot.github.io/programming/packages/"/>
    <updated>2015-04-12T14:52:06+02:00</updated>
    <id>https://tyler-abbot.github.io/programming/packages</id>
    <author>
      <name>Tyler Abbot</name>
      <uri>https://tyler-abbot.github.io/</uri>
      <email>tyler.abbot@sciencespo.fr</email>
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#package-management&quot;&gt;Package Management&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bibliography-management&quot;&gt;Bibliography Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;p&gt;Using LaTeX is mandatory for anyone who needs to type math, but getting the whole thing set-up can be a gigantic pain.  The key to a good install is to get TeX live installed right so that you have a good package manager, then to properly place your packages in the file tree so TexLive can find them.  If you are running Ubuntu or Debian, I suggest following &lt;a href=&quot;http://tex.stackexchange.com/questions/1092/how-to-install-vanilla-texlive-on-debian-or-ubuntu/95373#95373&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;these&lt;/strong&gt;&lt;/a&gt; super thorough instructions on how to install Tex Live.&lt;/p&gt;

&lt;h2 id=&quot;package-management&quot;&gt;Package Management&lt;/h2&gt;

&lt;p&gt;If you are writing finance papers (or any other economics papers, for that matter) you’ll eventually have to put them in a format to match a journal, or you’ll just want a nicer format than a standard LaTeX article.  In order to do this, you’ll probably need to download some special packages.  When you want to add these custom packages, you should store them in a folder under &lt;code&gt;texmf&lt;/code&gt;, in particular I use&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/usr/local/texlive/texmf-local/tex/latex/tmabbot&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should store any .sty, .bst, or .cls files you download here for easy reference.  One key thing to remember is to run &lt;code&gt;texhash&lt;/code&gt; whenever you are done.  Since I followed the directions in the link in the first paragraph, I have a symbolic link.  Thus I have to type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo /opt/texbin/texhash&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;into a terminal.  This will update the packages available in Tex and you should be able to compile your papers.&lt;/p&gt;

&lt;p&gt;A great resource for finance paper formatting and a much more thorough introduction to LaTex can be found on Richard Stanton’s &lt;a href=&quot;http://faculty.haas.berkeley.edu/stanton/texintro/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;website&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2 id=&quot;bibliography-management&quot;&gt;Bibliography Management&lt;/h2&gt;

&lt;p&gt;If you tend to use the same references often, you can create one large bibliography file and store it in the file tree so that you don’t have to move it from place to place.  I have had a lot of trouble getting my bibliography well placed, so I’ve come up with a bit of a workaround.  I place my .bib file in any some directory (for me it is called “Writing”) and then reference this file in my latex documents using the bibliography command. You simply use &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\bibliography&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;/path/to/bibliography&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;instead of just&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\bibliography&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    </content>
  </entry>
  
  <entry>
    <title>01 - How to Setup Ipython.</title>
    <link href="https://tyler-abbot.github.io/programming/how-to-setup-ipython/"/>
    <updated>2015-04-12T11:56:17+02:00</updated>
    <id>https://tyler-abbot.github.io/programming/how-to-setup-ipython</id>
    <author>
      <name>Tyler Abbot</name>
      <uri>https://tyler-abbot.github.io/</uri>
      <email>tyler.abbot@sciencespo.fr</email>
    </author>
    <content type="html">
      
      &lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#python-ing&quot;&gt;Python-ing!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;p&gt;If you are hoping to get into Python and need help getting set-up, this post is for you.  My preference for installing Python is Continuum Analytics’ Anaconda bundle.  It comes with all the packages you need to get started and is quick and easy to install.  I’ll go through the steps for getting up and running quickly in Ubuntu Linux, as well as covering some of the most useful basic features of Ipython.  If you are using OS or Windows the steps are a little different and you can find a guide &lt;a href=&quot;https://store.continuum.io/static/img/Anaconda-Quickstart.pdf&quot; target=&quot;_blank&quot;&gt;HERE.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;First, you’ll need to download Anaconda &lt;a href=&quot;https://store.continuum.io/cshop/anaconda/&quot; target=&quot;_blank&quot;&gt;HERE.&lt;/a&gt;  The site will detect your system and suggest the proper insall.  NOTE: If you are running a 32-bit operating system, you will have problems in the future if you want to install more advanced tools like PyCuda (I had to reinstall my entire operating system).  Also, I suggest you go with a Python 2.X version.  Although Python 3.X is available, some packages do not have good backwards compatibility.&lt;/p&gt;

&lt;p&gt;Second, open up a terminal and navigate to your Dowloads folder by typing&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Downloads/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once there, execute the installer by typing in the terminal&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bash NAME_OF_FILE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where you replace NAME_OF_FILE with the name of your download, which changes with version.  You’ll be prompted to specify an install location.  Use the default so that you can easily find what you are looking for later.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Next, you need to add the anaconda file to your path variable, so that terminal can find it.  As a side note, you can learn more about what PATH is and why it always seems to be a problem &lt;a href=&quot;http://www.linfo.org/path_env_var.html&quot; target=&quot;_blank&quot;&gt;HERE.&lt;/a&gt;  To see what the path variable is type the following in the terminal&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you do not see a folder containing the word “anaconda”, you need to update the PATH.  Type the following into the terminal&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/anaconda:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which will append the directory to your path.  My anaconda directory is under &lt;code&gt;/home/user_name/anaconda/bin&lt;/code&gt;, but yours might be slightly different.&lt;/p&gt;

&lt;p&gt;Now open a new terminal window and type &lt;code&gt;ipython&lt;/code&gt;.  That’s it!  You’re now using Python!&lt;/p&gt;

&lt;h2 id=&quot;python-ing&quot;&gt;Python-ing!&lt;/h2&gt;
&lt;p&gt;Now that you have your sweet Ipython set-up, what can it do?!  There are several ways to work with Ipython.  First, you can work directly at the command line.  By typing &lt;code&gt;ipython&lt;/code&gt; at the terminal you open an “Ipython shell”, where whatever you type will run in Python.  Another way to work on more complex projects is to write Python programs in a text-editor, such as Vim or Lightbox (post to come), and then to run these programs in your Ipython shell.  Finally, one of the coolest things you can do is to use the Ipython Notebook.  Open up a terminal and type&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;ipython&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notebook&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will open up an Ipython Notebook session in your default browser.  Then you can create a new ipython notebook, like &lt;a href=&quot;http://nbviewer.ipython.org/github/tyler-abbot/tyler-abbot.github.io/tree/master/misc/test.ipynb&quot; target=&quot;_blank&quot;&gt;this one&lt;/a&gt;.  Ipython notebooks are great teaching tools, so I’ll be using them often on this site to describe lots of things.&lt;/p&gt;

&lt;p&gt;That’s it!  You are now ready to learn to program in Python.  For more on different packages, best-practices (as far as an economist knows best practices), and lots of other stuff about Python, head &lt;a href=&quot;https://tyler-abbot.github.io/programming/python.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For some outside sources so you can hit the ground running, check out these great resources:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://wakari.io&quot; class=&quot;btn-inverse&quot;&gt;&lt;strong&gt;Wakari&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;
This website allows you to use a remote Python environment over the internet.  That way, you can use Python from any terminal.  Be warned: if you are in a large institution, they may have a firewall that blocks the necessary ports!  You’ll just have to try it out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://quant-econ.net&quot; class=&quot;btn-inverse&quot;&gt;&lt;strong&gt;Quant-Econ&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;
This is a great resource for learning Python and Julia for economics.  The site is run by Thomas J. Sargent and John Stachursky.  The course proceeds through numerical examples and practical exercises.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.kevinsheppard.com/Python_for_Econometrics&quot; class=&quot;btn-inverse&quot;&gt;&lt;strong&gt;Python for Econometrics&lt;/strong&gt;&lt;/a&gt;&lt;br /&gt;
This is a site that I’ve been meaning to check out.  One of the biggest complaints by economists is the lack of econometric tools in Python.  However, things are beginning to develop as more economists transition over.&lt;/p&gt;
&lt;/blockquote&gt;

    </content>
  </entry>
  
  
</feed>